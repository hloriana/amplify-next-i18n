{"version":3,"sources":["../../../src/babel/utils/toCSS.ts"],"names":["unitless","isSerializable","isBoxedPrimitive","hyphenate","s","replace","match","p1","toLowerCase","toCSS","o","Array","isArray","map","join","valueOf","toString","Object","entries","filter","value","key","p2","p3"],"mappings":"AAAA;AAEA,SAASA,QAAT,QAAyB,UAAzB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,SAAS,GAAIC,CAAD,IAChBA,CAAC,CACC;AADD,CAEEC,OAFH,CAEW,UAFX,EAEuB,CAACC,KAAD,EAAQC,EAAR,KAAgB,IAAGA,EAAE,CAACC,WAAH,EAAiB,EAF3D,EAGE;AAHF,CAIGH,OAJH,CAIW,MAJX,EAImB,MAJnB,CADF,C,CAOA;AACA;;;AACA,eAAe,SAASI,KAAT,CAAeC,CAAf,EAAqC;AAClD,MAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,EAAsB;AACpB,WAAOA,CAAC,CAACG,GAAF,CAAMJ,KAAN,EAAaK,IAAb,CAAkB,IAAlB,CAAP;AACD;;AAED,MAAIZ,gBAAgB,CAACQ,CAAD,CAApB,EAAyB;AACvB,WAAOA,CAAC,CAACK,OAAF,GAAYC,QAAZ,EAAP;AACD;;AAED,SAAOC,MAAM,CAACC,OAAP,CAAeR,CAAf,EACJS,MADI,CAEH,CAAC,GAAGC,KAAH,CAAD,KACE;AACA,SAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAJ5B,EAMJP,GANI,CAMA,CAAC,CAACQ,GAAD,EAAMD,KAAN,CAAD,KAAkB;AACrB,QAAInB,cAAc,CAACmB,KAAD,CAAlB,EAA2B;AACzB,aAAQ,GAAEC,GAAI,MAAKZ,KAAK,CAACW,KAAD,CAAQ,IAAhC;AACD;;AAED,WAAQ,GAAEjB,SAAS,CAACkB,GAAD,CAAM,KACvB,OAAOD,KAAP,KAAiB,QAAjB,IACAA,KAAK,KAAK,CADV,IAEA;AACA,MACEC,GAAG,CAAChB,OAAJ,CACE,gCADF,EAEE,CAACC,KAAD,EAAQC,EAAR,EAAYe,EAAZ,EAAgBC,EAAhB,KAAwB,GAAED,EAAE,CAACd,WAAH,EAAiB,GAAEe,EAAG,EAFlD,KAGKvB,QAJP,CAHA,GASK,GAAEoB,KAAM,IATb,GAUIA,KACL,GAZD;AAaD,GAxBI,EAyBJN,IAzBI,CAyBC,GAzBD,CAAP;AA0BD","sourcesContent":["// TypeScript Version: 3.2\n\nimport { unitless } from '../units';\nimport type { JSONValue } from '../types';\nimport isSerializable from './isSerializable';\nimport isBoxedPrimitive from './isBoxedPrimitive';\n\nconst hyphenate = (s: string) =>\n  s\n    // Hyphenate CSS property names from camelCase version from JS string\n    .replace(/([A-Z])/g, (match, p1) => `-${p1.toLowerCase()}`)\n    // Special case for `-ms` because in JS it starts with `ms` unlike `Webkit`\n    .replace(/^ms-/, '-ms-');\n\n// Some tools such as polished.js output JS objects\n// To support them transparently, we convert JS objects to CSS strings\nexport default function toCSS(o: JSONValue): string {\n  if (Array.isArray(o)) {\n    return o.map(toCSS).join('\\n');\n  }\n\n  if (isBoxedPrimitive(o)) {\n    return o.valueOf().toString();\n  }\n\n  return Object.entries(o)\n    .filter(\n      ([, value]) =>\n        // Ignore all falsy values except numbers\n        typeof value === 'number' || value\n    )\n    .map(([key, value]) => {\n      if (isSerializable(value)) {\n        return `${key} { ${toCSS(value)} }`;\n      }\n\n      return `${hyphenate(key)}: ${\n        typeof value === 'number' &&\n        value !== 0 &&\n        // Strip vendor prefixes when checking if the value is unitless\n        !(\n          key.replace(\n            /^(Webkit|Moz|O|ms)([A-Z])(.+)$/,\n            (match, p1, p2, p3) => `${p2.toLowerCase()}${p3}`\n          ) in unitless\n        )\n          ? `${value}px`\n          : value\n      };`;\n    })\n    .join(' ');\n}\n"],"file":"toCSS.js"}