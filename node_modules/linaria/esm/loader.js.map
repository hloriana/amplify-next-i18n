{"version":3,"sources":["../src/loader.ts"],"names":["fs","path","mkdirp","normalize","loaderUtils","enhancedResolve","findYarnWorkspaceRoot","cosmiconfig","EvalCache","Module","debug","transform","workspaceRoot","lernaConfig","searchPlaces","searchSync","lernaRoot","dirname","filepath","loader","content","inputSourceMap","resourcePath","clearForFile","sourceMap","undefined","cacheDirectory","preprocessor","extension","rest","getOptions","root","process","cwd","baseOutputFileName","replace","outputFilename","join","isAbsolute","includes","relative","resolveOptions","extensions","resolveSync","create","sync","_compilation","options","resolve","alias","modules","result","originalResolveFilename","_resolveFilename","id","filename","pluginOptions","cssText","Buffer","from","cssSourceMapText","toString","dependencies","length","forEach","dep","f","addDependency","e","console","warn","currentCssText","readFileSync","writeFileSync","callback","code","stringifyRequest"],"mappings":"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","sourcesContent":["/**\n * This file contains a Webpack loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport normalize from 'normalize-path';\nimport loaderUtils from 'loader-utils';\nimport enhancedResolve from 'enhanced-resolve';\nimport findYarnWorkspaceRoot from 'find-yarn-workspace-root';\nimport type { RawSourceMap } from 'source-map';\nimport cosmiconfig from 'cosmiconfig';\nimport * as EvalCache from './babel/eval-cache';\nimport Module from './babel/module';\nimport { debug } from './babel/utils/logger';\nimport transform from './transform';\n\nconst workspaceRoot = findYarnWorkspaceRoot();\nconst lernaConfig = cosmiconfig('lerna', {\n  searchPlaces: ['lerna.json'],\n}).searchSync();\nconst lernaRoot =\n  lernaConfig !== null ? path.dirname(lernaConfig.filepath) : null;\n\ntype LoaderContext = Parameters<typeof loaderUtils.getOptions>[0];\n\nexport default function loader(\n  this: LoaderContext,\n  content: string,\n  inputSourceMap: RawSourceMap | null\n) {\n  debug('loader', this.resourcePath);\n\n  EvalCache.clearForFile(this.resourcePath);\n\n  const {\n    sourceMap = undefined,\n    cacheDirectory = '.linaria-cache',\n    preprocessor = undefined,\n    extension = '.linaria.css',\n    ...rest\n  } = loaderUtils.getOptions(this) || {};\n\n  const root = workspaceRoot || lernaRoot || process.cwd();\n\n  const baseOutputFileName = this.resourcePath.replace(/\\.[^.]+$/, extension);\n\n  const outputFilename = normalize(\n    path.join(\n      path.isAbsolute(cacheDirectory)\n        ? cacheDirectory\n        : path.join(process.cwd(), cacheDirectory),\n      this.resourcePath.includes(root)\n        ? path.relative(root, baseOutputFileName)\n        : baseOutputFileName\n    )\n  );\n\n  const resolveOptions = {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  };\n\n  const resolveSync = enhancedResolve.create.sync(\n    // this._compilation is a deprecated API\n    // However there seems to be no other way to access webpack's resolver\n    // There is this.resolve, but it's asynchronous\n    // Another option is to read the webpack.config.js, but it won't work for programmatic usage\n    // This API is used by many loaders/plugins, so hope we're safe for a while\n    this._compilation?.options.resolve\n      ? {\n          ...resolveOptions,\n          alias: this._compilation.options.resolve.alias,\n          modules: this._compilation.options.resolve.modules,\n        }\n      : resolveOptions\n  );\n\n  let result;\n\n  const originalResolveFilename = Module._resolveFilename;\n\n  try {\n    // Use webpack's resolution when evaluating modules\n    Module._resolveFilename = (id, { filename }) =>\n      resolveSync(path.dirname(filename), id);\n\n    result = transform(content, {\n      filename: path.relative(process.cwd(), this.resourcePath),\n      inputSourceMap: inputSourceMap ?? undefined,\n      outputFilename,\n      pluginOptions: rest,\n      preprocessor,\n    });\n  } finally {\n    // Restore original behaviour\n    Module._resolveFilename = originalResolveFilename;\n  }\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies?.length) {\n      result.dependencies.forEach((dep) => {\n        try {\n          const f = resolveSync(path.dirname(this.resourcePath), dep);\n\n          this.addDependency(f);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);\n        }\n      });\n    }\n\n    // Read the file first to compare the content\n    // Write the new content only if it's changed\n    // This will prevent unnecessary WDS reloads\n    let currentCssText;\n\n    try {\n      currentCssText = fs.readFileSync(outputFilename, 'utf-8');\n    } catch (e) {\n      // Ignore error\n    }\n\n    if (currentCssText !== cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n      fs.writeFileSync(outputFilename, cssText);\n    }\n\n    this.callback(\n      null,\n      `${result.code}\\n\\nrequire(${loaderUtils.stringifyRequest(\n        this,\n        outputFilename\n      )});`,\n      result.sourceMap ?? undefined\n    );\n    return;\n  }\n\n  this.callback(null, result.code, result.sourceMap ?? undefined);\n}\n"],"file":"loader.js"}