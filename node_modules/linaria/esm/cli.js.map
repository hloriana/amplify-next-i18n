{"version":3,"sources":["../src/cli.ts"],"names":["path","fs","normalize","mkdirp","glob","yargs","transform","argv","usage","option","alias","type","description","requiresArg","demandOption","default","implies","strict","processFiles","_","outDir","sourceMaps","sourceRoot","insertCssRequires","configFile","config","ignore","files","options","count","resolvedFiles","reduce","acc","pattern","sync","absolute","forEach","filename","outputFilename","resolveOutputFilename","cssText","sourceMap","cssSourceMapText","readFileSync","toString","pluginOptions","dirname","cssContent","writeFileSync","inputFilename","resolve","relative","normalizedInputFilename","resolveRequireInsertionFilename","relativePath","requireStatement","startsWith","inputContent","trim","endsWith","console","log","replace","folderStructure","process","cwd","outputBasename","basename","extname","join"],"mappings":"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","sourcesContent":["/**\n * This file contains a CLI for Linaria.\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport normalize from 'normalize-path';\nimport mkdirp from 'mkdirp';\nimport glob from 'glob';\nimport yargs from 'yargs';\nimport transform from './transform';\n\nconst { argv } = yargs\n  .usage('Usage: $0 [options] <files ...>')\n  .option('config', {\n    alias: 'c',\n    type: 'string',\n    description: 'Path to a config file',\n    requiresArg: true,\n  })\n  .option('out-dir', {\n    alias: 'o',\n    type: 'string',\n    description: 'Output directory for the extracted CSS files',\n    demandOption: true,\n    requiresArg: true,\n  })\n  .option('source-maps', {\n    alias: 's',\n    type: 'boolean',\n    description: 'Generate source maps for the CSS files',\n    default: false,\n  })\n  .option('source-root', {\n    alias: 'r',\n    type: 'string',\n    description: 'Directory containing the source JS files',\n    requiresArg: true,\n  })\n  .option('insert-css-requires', {\n    alias: 'i',\n    type: 'string',\n    description:\n      'Directory containing JS files to insert require statements for the CSS files',\n    requiresArg: true,\n  })\n  .implies('insert-css-requires', 'source-root')\n  .option('ignore', {\n    alias: 'x',\n    type: 'string',\n    description: 'Pattern of files to ignore. Be sure to provide a string',\n    requiresArg: true,\n  })\n  .alias('help', 'h')\n  .alias('version', 'v')\n  .strict();\n\nprocessFiles(argv._, {\n  outDir: argv['out-dir'],\n  sourceMaps: argv['source-maps'],\n  sourceRoot: argv['source-root'],\n  insertCssRequires: argv['insert-css-requires'],\n  configFile: argv.config,\n  ignore: argv.ignore,\n});\n\ntype Options = {\n  outDir: string;\n  sourceMaps?: boolean;\n  sourceRoot?: string;\n  insertCssRequires?: string;\n  configFile?: string;\n  ignore?: string;\n};\n\nfunction processFiles(files: string[], options: Options) {\n  let count = 0;\n\n  const resolvedFiles = files.reduce(\n    (acc, pattern) => [\n      ...acc,\n      ...glob.sync(pattern, { absolute: true, ignore: options.ignore }),\n    ],\n    [] as string[]\n  );\n\n  resolvedFiles.forEach((filename) => {\n    const outputFilename = resolveOutputFilename(filename, options.outDir);\n\n    const { cssText, sourceMap, cssSourceMapText } = transform(\n      fs.readFileSync(filename).toString(),\n      {\n        filename,\n        outputFilename,\n        pluginOptions: {\n          configFile: options.configFile,\n        },\n      }\n    );\n\n    if (cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n\n      const cssContent =\n        options.sourceMaps && sourceMap\n          ? `${cssText}\\n/*# sourceMappingURL=${outputFilename}.map */`\n          : cssText;\n\n      fs.writeFileSync(outputFilename, cssContent);\n\n      if (\n        options.sourceMaps &&\n        sourceMap &&\n        typeof cssSourceMapText !== 'undefined'\n      ) {\n        fs.writeFileSync(`${outputFilename}.map`, cssSourceMapText);\n      }\n\n      if (options.insertCssRequires && options.sourceRoot) {\n        const inputFilename = path.resolve(\n          options.insertCssRequires,\n          path.relative(options.sourceRoot, filename)\n        );\n\n        const normalizedInputFilename = resolveRequireInsertionFilename(\n          inputFilename\n        );\n\n        const relativePath = normalize(\n          path.relative(path.dirname(inputFilename), outputFilename)\n        );\n\n        const requireStatement = `\\nrequire('${\n          relativePath.startsWith('.') ? relativePath : `./${relativePath}`\n        }');`;\n\n        const inputContent = fs.readFileSync(normalizedInputFilename, 'utf-8');\n\n        if (!inputContent.trim().endsWith(requireStatement)) {\n          fs.writeFileSync(\n            normalizedInputFilename,\n            `${inputContent}\\n${requireStatement}\\n`\n          );\n        }\n      }\n\n      count++;\n    }\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(`Successfully extracted ${count} CSS files.`);\n}\n\nfunction resolveRequireInsertionFilename(filename: string) {\n  return filename.replace(/\\.tsx?/, '.js');\n}\n\nfunction resolveOutputFilename(filename: string, outDir: string) {\n  const folderStructure = path.relative(process.cwd(), path.dirname(filename));\n  const outputBasename = path\n    .basename(filename)\n    .replace(path.extname(filename), '.css');\n\n  return path.join(outDir, folderStructure, outputBasename);\n}\n"],"file":"cli.js"}