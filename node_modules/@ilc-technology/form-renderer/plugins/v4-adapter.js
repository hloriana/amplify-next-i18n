"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_LISTENER_NAME = void 0;
var js_cookie_1 = __importDefault(require("js-cookie"));
var ef_env_utils_1 = require("@ilc-technology/ef-env-utils");
var programCodeToProductCode_1 = __importDefault(require("../utils/programCodeToProductCode"));
var misc_1 = require("../utils/misc");
var logger_1 = require("../utils/logger");
var QQManager_1 = __importDefault(require("../utils/QQManager"));
exports.PLUGIN_LISTENER_NAME = 'Forms API v4 Adapter';
var formTypeMapping = {
    brochure: ['Brochure', 'BRD', 'B_2', 'BRO'],
    pricequotation: ['PriceQuotation', 'PQ', 'EPQ', 'PQ'],
    contactus: ['ContactUs', 'CU', 'CU', 'CU'],
    infomeeting: ['Infomeeting', 'IN', 'I', 'INF'],
    consultation: ['Consultation', 'CO', 'CO', 'CONS'],
    campaign: ['campaign', 'Campaign', 'CAMP_4', 'Campaign'],
    parentcampaign: ['campaign', 'Campaign', 'CAMP_4', 'Campaign'],
    booknow: ['Reservation', 'RES', 'R', 'RO'],
    ambassador: ['Ambassador', 'AMB', 'AMB', 'AMB'],
    brandpromoter: ['Ambassador', 'BP', 'BP', 'BP'],
    'teacherzone-contactus': ['TeacherContactUs', 'TZM', 'TR', 'TeacherContactUs'],
    'teacherzone-freeresources': ['TeacherFreeResources', 'TZM', 'TR', 'TeacherFreeResources'],
    'teacherzone-newsletter': ['TeacherNewsletter', 'TZM', 'TR', 'TeacherNewsletter'],
    'teacherzone-requestcourse': ['TeacherCourseRequest', 'TZM', 'TR', 'TeacherCourseRequest'],
    'teacherzone-webinar': ['TeacherWebinar', 'TZM', 'TR', 'TeacherNewsletter'],
};
function getFormTypeMapping(type) {
    var index = 'brochure';
    Object.keys(formTypeMapping).forEach(function (key) {
        if (new RegExp(key).test(type)) {
            index = key;
        }
    });
    var _a = __read(formTypeMapping[index], 4), endpoint = _a[0], EnqFormType = _a[1], FormType = _a[2], FormId = _a[3];
    return { endpoint: endpoint, EnqFormType: EnqFormType, FormType: FormType, FormId: FormId };
}
function isBrandAmbassadorIdValid(input) {
    return new RegExp(/[a-z0-9]{18}/i).test(input);
}
var deprecatedMarketsMapping = {
    uy: 'ar',
    lu: 'be',
    in: 'we',
    ly: 'wm',
};
var getSubmissionDomain = function (mc) {
    var _a = ef_env_utils_1.getMarketInfoByMarketCode(deprecatedMarketsMapping[mc] ? deprecatedMarketsMapping[mc] : mc), liveDomain = _a.liveDomain, qaDomain = _a.qaDomain;
    var submissionDomain = 'www.ef.com';
    if (ef_env_utils_1.isLocal()) {
        submissionDomain = 'qa.ef.com';
    }
    else if (ef_env_utils_1.isQA()) {
        submissionDomain = qaDomain;
    }
    else if (ef_env_utils_1.isEFDomain()) {
        submissionDomain = liveDomain;
    }
    return submissionDomain;
};
var callback = function (form) {
    var _a, _b, _c, _d, _e, _f;
    var qqManager;
    var overrideProgramCode = (_c = (_b = (_a = form.settings.plugins) === null || _a === void 0 ? void 0 : _a.legacySettings) === null || _b === void 0 ? void 0 : _b.programCode) === null || _c === void 0 ? void 0 : _c.toUpperCase();
    var overrideProductCode = (_f = (_e = (_d = form.settings.plugins) === null || _d === void 0 ? void 0 : _d.legacySettings) === null || _e === void 0 ? void 0 : _e.productCode) === null || _f === void 0 ? void 0 : _f.toUpperCase();
    if (/pricequotation/.test(form.settings.id)) {
        form.on('configurationDownloaded', exports.PLUGIN_LISTENER_NAME, function () {
            form.setPriceQuotationData = function (pqData) {
                form.pqData = pqData;
            };
        });
    }
    if (/booknow/.test(form.settings.id)) {
        form.on('configurationDownloaded', exports.PLUGIN_LISTENER_NAME, function () {
            form.setReservationDetails = function (resDet) {
                form.reservationDetails = resDet;
            };
        });
    }
    if (/infomeeting/.test(form.settings.id)) {
        form.on('configurationDownloaded', exports.PLUGIN_LISTENER_NAME, function () {
            form.setInfomeetingId = function (infomeetingId) {
                form.infomeetingId = infomeetingId;
            };
        });
    }
    form.on('formRendered', exports.PLUGIN_LISTENER_NAME, function () { return __awaiter(void 0, void 0, void 0, function () {
        var formType, EnqFormType, isTbc, forceTbc, wantsBrochureWrapper, wantsBrochureInput;
        var _a, _b;
        return __generator(this, function (_c) {
            formType = form.settings.id;
            EnqFormType = getFormTypeMapping(formType).EnqFormType;
            form.htmlElement.setAttribute('form-type', EnqFormType);
            form.htmlElement.setAttribute('form-version', 'forms-x');
            isTbc = misc_1.getUrlParams().tbc;
            forceTbc = (_b = (_a = form.settings.plugins) === null || _a === void 0 ? void 0 : _a.legacySettings) === null || _b === void 0 ? void 0 : _b.forceTbc;
            if (isTbc || forceTbc) {
                wantsBrochureWrapper = document.querySelector('.ef-form-wantsBrochure-wrapper');
                wantsBrochureInput = document.querySelector('.ef-form-wantsBrochure-wrapper input');
                if (wantsBrochureWrapper && wantsBrochureInput) {
                    if (!wantsBrochureInput.checked) {
                        wantsBrochureInput.click();
                    }
                    wantsBrochureWrapper.style.display = 'none';
                }
            }
            if (QQManager_1.default.qqFormTypes.includes(formType)) {
                qqManager = new QQManager_1.default(formType, form.settings.marketCode, overrideProgramCode);
            }
            return [2];
        });
    }); });
    form.on('submissionObjectReady', exports.PLUGIN_LISTENER_NAME, function () { return __awaiter(void 0, void 0, void 0, function () {
        var d, v4Data, _a, formType, marketCode, _b, endpoint, FormId, EnqFormType, FormType, mc, DateOfBirth, _c, year, month, day, _d, stateRegionCode, stateRegionName, _e, plugins, _f, legacySettings, programCode, productCode, wb, urlParams, BrandAmbassadorID, VisitOfficeName, visitOfficeField, preferredOffice, consultationData, _g, isCompleted, programs, CampaignAllocationPrograms, CampaignAllocationCode;
        var _h;
        return __generator(this, function (_j) {
            d = form.data;
            v4Data = {};
            _a = form.settings, formType = _a.id, marketCode = _a.marketCode;
            _b = getFormTypeMapping(formType), endpoint = _b.endpoint, FormId = _b.FormId, EnqFormType = _b.EnqFormType, FormType = _b.FormType;
            mc = ef_env_utils_1.mapVirtualMarketCodesToReal(marketCode);
            form.formConfiguration.submissionEndpoint = "https://" + getSubmissionDomain(marketCode) + "/secureformsapi/" + endpoint + "/?mc=" + mc;
            DateOfBirth = '';
            if (d['birthDate']) {
                _c = d['birthDate'], year = _c.year, month = _c.month, day = _c.day;
                DateOfBirth = new Date(Date.UTC(year, month - 1, day)).toISOString();
            }
            if (!d.state) {
                d.state = '';
            }
            v4Data.customer = [
                'firstName',
                'lastName',
                'parentFirstName',
                'parentLastName',
                'addressLine1',
                'addressLine2',
                'addressLine3',
                'houseNumber',
                'apartmentNumber',
                'postalCode',
                'city',
                'countryCode',
                'areaCodeHomePhone',
                'homePhone',
                'areaCodeMobilePhone',
                'mobilePhone',
                'email',
                'parentPhone',
                'parentEmail',
                'comments',
                'preferredOffice',
                'userSelectedSourceCode',
                'companyName',
                'jobTitle',
                'citizenshipCode',
                'nickName',
            ].reduce(function (map, key) {
                var legacyKey = "" + key[0].toUpperCase() + key.substr(1);
                map[legacyKey] = d[key] || '';
                return map;
            }, {});
            v4Data.customer.Gender = ' ';
            v4Data.customer.DateOfBirth = DateOfBirth;
            v4Data.customer.IsParents = typeof d.isParents !== 'undefined' ? d.isParents : 'false';
            v4Data.customer.CountryCode = typeof d.countryCode === 'string' ? d.countryCode.toUpperCase() : ef_env_utils_1.getCountryCodeByMarketCode(marketCode).toUpperCase();
            _d = __read(d.state.split('|'), 2), stateRegionCode = _d[0], stateRegionName = _d[1];
            v4Data.customer.StateRegionCode = stateRegionCode;
            v4Data.customer.StateRegionName = stateRegionName;
            v4Data.customer.CheckboxCombined = true;
            _e = form.settings.plugins, plugins = _e === void 0 ? {} : _e;
            _f = plugins.legacySettings, legacySettings = _f === void 0 ? {} : _f;
            programCode = overrideProgramCode ? overrideProgramCode : 'ILS';
            productCode = overrideProductCode ? overrideProductCode : programCodeToProductCode_1.default(programCode);
            if (QQManager_1.default.qqFormTypes.includes(formType) && !overrideProgramCode) {
                programCode = qqManager.getAllocationProgramCode();
                productCode = programCodeToProductCode_1.default(programCode);
            }
            wb = false;
            if (/brochure/.test(formType)) {
                wb = !!d.brochureType && d.brochureType === 'F-B';
            }
            if (/campaign/.test(formType)) {
                wb = d.wantsBrochure;
            }
            urlParams = misc_1.getUrlParams();
            if (urlParams.refid && isBrandAmbassadorIdValid(urlParams.refid)) {
                BrandAmbassadorID = urlParams.refid;
            }
            else if (legacySettings.brandAmbassadorId && isBrandAmbassadorIdValid(legacySettings.brandAmbassadorId)) {
                BrandAmbassadorID = legacySettings.brandAmbassadorId;
            }
            v4Data.extendedDetail = {
                ProductCode: productCode,
                ProgramCode: programCode,
                EFComMarketCode: ef_env_utils_1.mapVirtualMarketCodesToReal(form.settings.marketCode).toUpperCase(),
                BrowseCountryCode: js_cookie_1.default.get('efcc') || 'WE',
                WantsMoreInfo: !wb,
                WantsBrochure: wb,
                DeviceType: misc_1.isMobile() ? 'MobilePhone' : 'Desktop',
                UserSelectedSourceCode: d.userSelectedSourceCode || '',
                PreferredOffice: d.preferredOffice || '',
                EnqFormType: EnqFormType,
                EnqFormId: (legacySettings.websiteId || 'FormsX') + "-" + FormId + "-" + programCode,
                IsGroup: false,
                IsExpressCall: false,
                WantsToTravelSoon: d.wantsToTravelSoon,
                BrandAmbassadorID: BrandAmbassadorID,
            };
            v4Data.schoolData = {};
            v4Data.school = {};
            v4Data.tracking = form.data.tracking || {};
            v4Data.requestTrueProgramCode = true;
            v4Data.timestamp = new Date().getTime();
            v4Data.internalData = {
                GoogleCountryCode: d.countryCode || form.settings.marketCode,
                PhoneType: d.phoneRadio || 'MP',
                FormType: FormType,
            };
            if (/pricequotation/.test(formType)) {
                if (!form.pqData) {
                    logger_1.logError("Submitting PQ form without mandatory pqData argument. Make sure you're calling form.setPriceQuotationData() before submission");
                }
                v4Data.pqQuestionsAnswers = form.pqData;
            }
            if (/booknow/.test(formType)) {
                if (!form.reservationDetails) {
                    logger_1.logError("Submitting Book Now form without mandatory reservationDetails argument. Make sure you're calling form.setReservationDetails() before submission");
                }
                v4Data.reservationDetails = form.reservationDetails;
            }
            if (/infomeeting/.test(formType)) {
                if (!form.infomeetingId) {
                    logger_1.logError("Submitting IM form without mandatory infomeetingId argument. Make sure you're calling form.setInfomeetingId() before submission");
                }
                v4Data.InfomeetingData = {
                    InfomeetingId: form.infomeetingId,
                    Attendees: d.attendees,
                };
            }
            if (/consultation/.test(formType)) {
                VisitOfficeName = '';
                visitOfficeField = (_h = form.formConfiguration) === null || _h === void 0 ? void 0 : _h.fields.find(function (_a) {
                    var name = _a.name;
                    return name === 'visitOffice';
                });
                if (visitOfficeField) {
                    preferredOffice = visitOfficeField.options.find(function (_a) {
                        var code = _a.code;
                        return code === d.visitOffice;
                    });
                    VisitOfficeName = preferredOffice && preferredOffice.text;
                }
                consultationData = {
                    VisitDate: d.visitDate,
                    VisitTime: d.visitTime,
                    VisitOffice: d.visitOffice,
                    VisitOfficeName: VisitOfficeName,
                    StudyLength: d.studyLength,
                    TravelDate: d.travelDate,
                };
                v4Data.customer = __assign(__assign({}, v4Data.customer), consultationData);
                v4Data.ConsultationDetail = consultationData;
            }
            if (/consultation-online/.test(formType)) {
                v4Data.customer.Comments += " [Consultation type]: " + d.consultationType;
                v4Data.extendedDetail.EnqFormType = 'CT';
            }
            if (/campaign/.test(formType)) {
                _g = legacySettings.isCompleted, isCompleted = _g === void 0 ? true : _g;
                programs = legacySettings.campaignAllocationPrograms;
                if (QQManager_1.default.qqFormTypes.includes(formType)) {
                    programs = qqManager.getCampaignAllocationPrograms();
                }
                if (!Array.isArray(programs) || programs.length === 0) {
                    if (d.wantsBrochure) {
                        programs = ['ILS'];
                    }
                    else {
                        programs = ['ILS', 'ILC', 'LY'];
                    }
                }
                CampaignAllocationPrograms = programs.join(',');
                CampaignAllocationCode = programs.length > 1 ? 'mixed' : 'single';
                v4Data.CampaignData = {
                    CampaignName: legacySettings.websiteId || 'unset',
                    CampaignAllocationCode: CampaignAllocationCode,
                    CampaignAllocationPrograms: CampaignAllocationPrograms,
                    CampaignQuestionAnswer: d.campaignQuestionAnswer || [],
                };
                v4Data.extendedDetail.IsCompleted = isCompleted;
                if (/parent/.test(formType) || /dadsdontcry/.test(formType)) {
                    v4Data.customer = __assign(__assign({}, v4Data.customer), { FirstName: d.parentFirstName, LastName: d.parentLastName, ParentPhone: d.homePhone || d.mobilePhone || '', ParentEmail: d.email || '' });
                }
            }
            if (/brandpromoter/.test(formType)) {
                v4Data.customer.Comments += "[ID Card Type]: " + d.idCardType + " - [ID Card Number]: " + d.idCardNumber + " - [Occupation]: " + d.occupation;
            }
            form.unsafeSetData(__assign({}, v4Data));
            return [2];
        });
    }); });
    form.on('submissionCompleted', exports.PLUGIN_LISTENER_NAME, function () {
        var formType = form.settings.id;
        if (!/^(campaign|booknow)/.test(formType)) {
            var endpoint = getFormTypeMapping(formType).endpoint;
            var FormId = form.submissionResponseData.FormId;
            var submissionEndpoint = form.formConfiguration.submissionEndpoint.replace(endpoint, "UpdateIsCompleted/" + FormId);
            fetch(submissionEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=UTF-8',
                },
                body: JSON.stringify({}),
            });
        }
    });
};
exports.default = callback;
