"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_LISTENER_NAME = void 0;
exports.PLUGIN_LISTENER_NAME = 'Forms API Google Maps API';
var placeField;
function updateAddressType(form, streetNumber) {
    if (form.data.internalData.RouteAddress && form.data.internalData.RouteAddress.indexOf(streetNumber)) {
        form.data.internalData.AddressType = 'route_address';
    }
    else if (form.data.internalData.longRouteAddress && form.data.internalData.longRouteAddress.indexOf(streetNumber)) {
        form.data.internalData.AddressType = 'longRoute_Address';
    }
}
function fillFormField(form, name, value) {
    var field = form.fields.find(function (f) { return f.configuration.name === name; });
    if (field) {
        field.value = value;
        field.triggerChangeEvent();
    }
    else {
        form.data[name] = value;
    }
}
function addressFilled(form) {
    var _a;
    var hasStateField = (_a = form.formConfiguration) === null || _a === void 0 ? void 0 : _a.fields.some(function (_a) {
        var name = _a.name;
        return name === 'state';
    });
    var tmpPlace = placeField.getPlace();
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({ address: tmpPlace.formatted_address }, function (results, status) {
        var e_1, _a;
        if (status === google.maps.GeocoderStatus.OK) {
            var _b = __read(results, 1), place = _b[0];
            fillFormField(form, 'addressLine1', place.formatted_address);
            if (typeof place.geometry === 'object' && typeof place.geometry.location === 'object' && typeof place.geometry.location.lat === 'function') {
                form.data.internalData.Latitude = place.geometry.location.lat();
                form.data.Longitude = place.geometry.location.lng();
                form.data.GoogleLocationType = place.geometry.location_type;
            }
            form.data.internalData.GooglePartialMatch = typeof place.partial_match === 'boolean' && place.partial_match;
            var streetNumber = '';
            try {
                for (var _c = __values(place.address_components), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var addressComponent = _d.value;
                    var componentType = addressComponent.types[0];
                    if (componentType === 'route') {
                        form.data.internalData.RouteAddress = addressComponent.short_name;
                        form.data.internalData.longRouteAddress = addressComponent.long_name;
                        form.data.internalData.LongRouteAddress = form.data.internalData.longRouteAddress;
                        updateAddressType(form, streetNumber);
                    }
                    else if (componentType === 'street_number') {
                        streetNumber = addressComponent.short_name;
                        updateAddressType(form, streetNumber);
                        fillFormField(form, 'houseNumber', streetNumber);
                    }
                    else if (componentType === 'neighborhood') {
                        form.data.internalData.Neighborhood = addressComponent.long_name;
                    }
                    else if (componentType === 'postal_code') {
                        fillFormField(form, 'postalCode', addressComponent.long_name);
                    }
                    else if (componentType === 'locality') {
                        fillFormField(form, 'city', addressComponent.long_name);
                    }
                    else if (componentType === 'administrative_area_level_1' && hasStateField) {
                        fillFormField(form, 'state', addressComponent.short_name);
                    }
                    else if (componentType === 'country') {
                        fillFormField(form, 'countryCode', addressComponent.short_name);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (status === google.maps.GeocoderStatus.ZERO_RESULTS) {
        }
        else if (status !== google.maps.GeocoderStatus.INVALID_REQUEST) {
            throw new Error("EF Forms: Places: Google Maps API error: " + status);
        }
    });
}
function initialize(form) {
    if (typeof google !== 'undefined' && typeof google !== 'undefined') {
        if (!form.data.internalData) {
            form.data.internalData = {};
        }
        var addressFieldConf = form.fields.find(function (field) { return field.configuration.name === 'addressLine1'; });
        if (addressFieldConf) {
            var addressFieldWrapper = addressFieldConf.htmlElement;
            var addressField_1 = addressFieldWrapper.querySelector('input');
            placeField = new google.maps.places.Autocomplete(addressField_1, { types: ['geocode'] });
            placeField.addListener('place_changed', function () { return addressFilled(form); });
            addressField_1.addEventListener('blur', function () {
                google.maps.event.trigger(addressField_1, 'place_changed');
                return false;
            });
            addressField_1.addEventListener('keypress', function (_a) {
                var which = _a.which;
                if (which === 13) {
                    google.maps.event.trigger(addressField_1, 'place_changed');
                    return false;
                }
            });
        }
    }
    else {
        setTimeout(function () { return initialize(form); }, 500);
    }
}
var callback = function (form) {
    form.on('formRendered', exports.PLUGIN_LISTENER_NAME, function () { return initialize(form); });
};
exports.default = callback;
