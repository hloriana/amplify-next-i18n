"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_LISTENER_NAME = void 0;
var dom_1 = require("../utils/dom");
var misc_1 = require("../utils/misc");
exports.PLUGIN_LISTENER_NAME = 'Forms API Google Maps API';
function parseChineseListOfStates(_a) {
    var ListOfStates = _a.ListOfStates;
    return ListOfStates.reduce(function (map, _a) {
        var Code = _a.Code, ListOfCities = _a.ListOfCities;
        map[Code] = ListOfCities.map(function (_a) {
            var CityName = _a.CityName;
            return CityName;
        });
        return map;
    }, {});
}
function addChineseFieldListeners(form, stateCityMap, renderedForm) {
    var _a;
    if (renderedForm && stateCityMap) {
        var state = form.fields.find(function (_a) {
            var configuration = _a.configuration;
            return configuration.name === 'state';
        });
        var city_1 = form.fields.find(function (_a) {
            var configuration = _a.configuration;
            return configuration.name === 'city';
        });
        if (state && city_1) {
            (_a = state._selectElement) === null || _a === void 0 ? void 0 : _a.addEventListener('change', function () {
                setTimeout(function () {
                    var _a;
                    var _b, _c, _d, _e;
                    (_b = city_1.htmlElement) === null || _b === void 0 ? void 0 : _b.classList.remove('ef-form-invalid', '-is-invalid');
                    (_d = (_c = city_1.htmlElement) === null || _c === void 0 ? void 0 : _c.querySelector('div')) === null || _d === void 0 ? void 0 : _d.classList.remove('ef-form-invalid', '-is-invalid');
                    var stateRes = /^(\d+)\|/.exec(form.data.state);
                    if (stateRes) {
                        var _f = __read(stateRes, 2), _ = _f[0], stateId = _f[1];
                        _a = __read(stateCityMap[stateId], 1), city_1.value = _a[0];
                        var childCityOptions = stateCityMap[stateId].map(function (value) { return dom_1.createElement('option', { value: value }, value); });
                        var fragment_1 = document.createDocumentFragment();
                        childCityOptions.forEach(function (node) { return fragment_1.appendChild(node); });
                        city_1._selectElement = misc_1.emptyNode(city_1._selectElement);
                        city_1._selectElement.appendChild(fragment_1);
                        (_e = city_1._selectElement) === null || _e === void 0 ? void 0 : _e.addEventListener('change', function (ev) {
                            var _a, _b;
                            var value = ev.target.value;
                            city_1.value = value;
                            (_a = city_1.htmlElement) === null || _a === void 0 ? void 0 : _a.classList.remove('ef-form-empty');
                            (_b = city_1.htmlElement) === null || _b === void 0 ? void 0 : _b.classList.add('ef-form-valid', '-is-valid');
                        });
                    }
                }, 10);
            });
        }
        else {
            throw new Error('[Forms X CN Addr] cannot find state and/or city nodes among the rendered fields.');
        }
    }
}
var callback = function (form) {
    var renderedForm = false;
    var stateCityMap = null;
    form.on('configurationDownloaded', exports.PLUGIN_LISTENER_NAME, function () { return __awaiter(void 0, void 0, void 0, function () {
        var chinaAddressUrl, res, data, exc_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    chinaAddressUrl = 'https://liuxue.ef.com.cn/gocampaign/shared/cn-addresses.json';
                    return [4, fetch(chinaAddressUrl)];
                case 1:
                    res = _a.sent();
                    return [4, res.json()];
                case 2:
                    data = _a.sent();
                    stateCityMap = parseChineseListOfStates(data);
                    addChineseFieldListeners(form, stateCityMap, renderedForm);
                    return [3, 4];
                case 3:
                    exc_1 = _a.sent();
                    console.log(exc_1);
                    throw new Error('[Forms X CN Addr] Plugin error. Please inform Forms X devs');
                case 4: return [2];
            }
        });
    }); });
    form.on('formRendered', exports.PLUGIN_LISTENER_NAME, function () {
        renderedForm = true;
        addChineseFieldListeners(form, stateCityMap, renderedForm);
    });
};
exports.default = callback;
