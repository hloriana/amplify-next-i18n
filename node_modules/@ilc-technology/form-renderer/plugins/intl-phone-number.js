"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phoneInput = exports.PLUGIN_LISTENER_NAME = void 0;
var misc_1 = require("../utils/misc");
var js_cookie_1 = __importDefault(require("js-cookie"));
var intl_tel_input_1 = __importDefault(require("intl-tel-input"));
exports.PLUGIN_LISTENER_NAME = 'International phone number';
var callback = function (form) {
    form.on('presubmissionObjectReady', exports.PLUGIN_LISTENER_NAME, function () {
        var _a;
        var d = form.data;
        if (d['mobilePhone'] && exports.phoneInput && !/^\+[0-9]*$/.test(d['mobilePhone'])) {
            d['mobilePhone'] = exports.phoneInput.getNumber() || d['mobilePhone'];
        }
        if (!d['mobilePhone']) {
            var countryCode = (_a = document.querySelector(".iti__selected-dial-code")) === null || _a === void 0 ? void 0 : _a.innerHTML;
            var input = document.getElementById(form.settings.id + "-mobilePhone");
            d['mobilePhone'] = "" + countryCode + input.value;
        }
        form.unsafeSetData(__assign({}, d));
    });
    form.on('formRendered', exports.PLUGIN_LISTENER_NAME, function () { return __awaiter(void 0, void 0, void 0, function () {
        var error_1, input, label, style;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, misc_1.appendStyles('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css')];
                case 1:
                    _a.sent();
                    return [3, 3];
                case 2:
                    error_1 = _a.sent();
                    console.error('unable to append intl-tel css: ', error_1);
                    return [3, 3];
                case 3:
                    try {
                        input = document.querySelector("#" + form.settings.id + "-mobilePhone");
                        label = document.querySelector("label[for=\"" + form.settings.id + "-mobilePhone\"]");
                        style = document.createElement('style');
                        style.innerHTML = "\n      .ef-phone-label {\n        width: 100%;\n      }\n\n      #" + form.settings.id + "-mobilePhone {\n        padding-left: 50px;\n      }\n\n      .ef-phone-label-flag {\n        margin-left: 35px;\n      }\n      ";
                        document.head.appendChild(style);
                        if (input) {
                            exports.phoneInput = intl_tel_input_1.default(input, {
                                initialCountry: js_cookie_1.default.get('efcc') || 'ch',
                                separateDialCode: true,
                                nationalMode: false,
                                utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js',
                                customPlaceholder: function (selectedCountryPlaceholder) {
                                    return selectedCountryPlaceholder.replace(/\D+/g, "");
                                },
                            });
                            if (input.parentElement) {
                                input.parentElement.className += ' ef-phone-label';
                                if (input.parentElement.parentElement)
                                    input.parentElement.parentElement.classList.remove('ef-form-text-wrapper');
                            }
                            if (label) {
                                label.className += ' ef-phone-label-flag';
                            }
                        }
                    }
                    catch (exc) {
                        console.log(exc);
                        throw new Error('[Forms X phone number] Plugin error. Please inform Forms X devs');
                    }
                    return [2];
            }
        });
    }); });
};
exports.default = callback;
