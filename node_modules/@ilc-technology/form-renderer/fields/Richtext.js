"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("../utils/dom");
var Field_1 = __importDefault(require("./Field"));
var Richtext = (function (_super) {
    __extends(Richtext, _super);
    function Richtext(configuration, form) {
        var _this = _super.call(this) || this;
        _this.configuration = configuration;
        _this.form = form;
        _this.render = function () {
            var _a = _this, form = _a.form, configuration = _a.configuration;
            var label = configuration.label, name = configuration.name, type = configuration.type;
            var _b = form.settings, applyGud = _b.applyGud, id = _b.id;
            _this.htmlElement = dom_1.createElement('div', {
                id: id + "-" + name,
                class: "ef-form-" + (applyGud ? 'group' : 'control') + " ef-form-" + name + "-wrapper ef-form-" + type + "-wrapper u-s-mb-xs",
            }, label || '');
            return _this.htmlElement;
        };
        return _this;
    }
    Richtext.builder = function (conf, form) {
        return new Richtext(conf, form);
    };
    Object.defineProperty(Richtext.prototype, "value", {
        get: function () {
            return '';
        },
        set: function (value) { },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Richtext.prototype, "previousValue", {
        get: function () {
            return '';
        },
        enumerable: false,
        configurable: true
    });
    return Richtext;
}(Field_1.default));
exports.default = Richtext;
Field_1.default.register('richtext', Richtext.builder);
