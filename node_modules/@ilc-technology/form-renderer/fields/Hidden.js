"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("../utils/dom");
var Field_1 = __importDefault(require("./Field"));
var Hidden = (function (_super) {
    __extends(Hidden, _super);
    function Hidden(configuration, form) {
        var _this = _super.call(this) || this;
        _this.configuration = configuration;
        _this.form = form;
        _this.render = function () {
            var _a = _this, form = _a.form, configuration = _a.configuration;
            var name = configuration.name;
            var defaultValue = configuration.defaultValue || '';
            _this._inputElement = dom_1.createElement('input', {
                id: form.settings.id + "-" + configuration.name,
                type: 'hidden',
                name: name,
                class: 'hidden',
                value: defaultValue,
            });
            _this.htmlElement = _this._inputElement;
            form.data[configuration.name] = defaultValue;
            return _this.htmlElement;
        };
        _this._inputElement = null;
        return _this;
    }
    Hidden.builder = function (conf, form) {
        return new Hidden(conf, form);
    };
    Object.defineProperty(Hidden.prototype, "value", {
        get: function () {
            return this._inputElement ? this._inputElement.value : '';
        },
        set: function (value) {
            var configuration = this.configuration;
            if (this._inputElement) {
                this._inputElement.value = value;
                this.form.data[configuration.name] = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Hidden.prototype, "previousValue", {
        get: function () {
            return this.value;
        },
        enumerable: false,
        configurable: true
    });
    return Hidden;
}(Field_1.default));
exports.default = Hidden;
Field_1.default.register('hidden', Hidden.builder);
