"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("../utils/dom");
var Field_1 = __importDefault(require("./Field"));
var misc_1 = require("../utils/misc");
var dom_2 = require("../utils/dom");
var misc_2 = require("../utils/misc");
var buildSingleDropdown = function (formId, id, min, max, label, reverse) {
    var fragment = document.createDocumentFragment();
    var optionLabel = dom_1.createElement('option', { value: '' }, label);
    fragment.appendChild(optionLabel);
    var options = [];
    for (var i = min; i < max; i += 1) {
        options.push(dom_1.createElement('option', {
            value: i + 1,
        }, i + 1));
    }
    if (reverse) {
        options.reverse();
    }
    options.forEach(function (option) { return fragment.appendChild(option); });
    var node = dom_1.createElement('select', {
        id: formId + "-" + id,
        type: 'text',
        name: label,
        class: 'ef-input ef-form-empty',
    });
    node.appendChild(fragment);
    return node;
};
var zeroFill = function (n) { return "" + (n < 10 ? '0' : '') + n; };
var DateDropdowns = (function (_super) {
    __extends(DateDropdowns, _super);
    function DateDropdowns(configuration, form) {
        var _this = _super.call(this) || this;
        _this.configuration = configuration;
        _this.form = form;
        _this._daySelectElement = null;
        _this._monthSelectElement = null;
        _this._yearSelectElement = null;
        _this._dateValue = {
            day: -1,
            month: -1,
            year: -1,
        };
        _this._inputElement = null;
        _this._previousValue = null;
        _this._dobErrorMessage = '';
        _this.render = function () {
            var _a = _this, form = _a.form, configuration = _a.configuration;
            var name = configuration.name, label = configuration.label, _b = configuration.validationRules, validationRules = _b === void 0 ? [] : _b, _c = configuration.additionalData, additionalData = _c === void 0 ? { labels: {} } : _c;
            var _d = form.settings, applyGud = _d.applyGud, marketCode = _d.marketCode;
            var dobValidationRule = validationRules.find(function (val) { return val.type === 'validDate'; });
            _this._dobErrorMessage = dobValidationRule ? dobValidationRule.errorMessage : '';
            var _self = _this;
            if (misc_1.isMobile()) {
                _this._inputElement = dom_1.createElement('input', {
                    id: form.settings.id + "-" + configuration.name,
                    type: 'date',
                    class: 'ef-input',
                    name: name,
                });
                _this._inputElement.addEventListener('change', function (_a) {
                    var target = _a.target;
                    return __awaiter(_this, void 0, void 0, function () {
                        var value, actualDate, validation;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    value = target.value;
                                    actualDate = new Date(value);
                                    _self._dateValue = {
                                        day: value ? actualDate.getDate() : -1,
                                        month: value ? actualDate.getMonth() + 1 : -1,
                                        year: value ? actualDate.getFullYear() : -1,
                                    };
                                    _super.prototype._executeListeners.call(this, 'change');
                                    return [4, _super.prototype.validate.call(this)];
                                case 1:
                                    validation = _b.sent();
                                    form.data[configuration.name] = validation.outcome ? _self._dateValue : null;
                                    dom_2.createErrorMessageNodes(errorMessageWrapper, validation.errorList);
                                    this.htmlElement.classList.remove('ef-form-empty');
                                    if (!value) {
                                        this.htmlElement.classList.add('ef-form-empty');
                                    }
                                    _super.prototype._executeListeners.call(this, 'validationCompleted');
                                    _self._previousValue = _self._dateValue;
                                    return [2];
                            }
                        });
                    });
                });
            }
            else {
                var _e = additionalData.labels, day = _e.day, month = _e.month, year = _e.year;
                var currentYear = new Date().getFullYear();
                _this._daySelectElement = buildSingleDropdown(form.settings.id, 'day', 0, 31, day);
                _this._monthSelectElement = buildSingleDropdown(form.settings.id, 'month', 0, 12, month);
                _this._yearSelectElement = buildSingleDropdown(form.settings.id, 'year', currentYear - 81, currentYear - 3, year, true);
                var addDropdownListener = function (htmlElement, node, field) {
                    node.addEventListener('change', function (event) { return __awaiter(_this, void 0, void 0, function () {
                        var target, value, parsed, dateFieldNames, shouldImmediatelyValidate, validation;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    target = event.target;
                                    value = target.value;
                                    parsed = value ? parseInt(value, 10) : -1;
                                    _self._dateValue[field] = parsed;
                                    target.classList.remove('ef-form-empty');
                                    if (isNaN(parsed) || parsed < 0) {
                                        target.classList.add('ef-form-empty');
                                    }
                                    _super.prototype._executeListeners.call(this, 'change');
                                    dateFieldNames = ['day', 'month', 'year'];
                                    shouldImmediatelyValidate = dateFieldNames.reduce(function (acc, f) { return acc && (f === field || _this._dateValue[f] !== -1); }, true);
                                    if (!shouldImmediatelyValidate) return [3, 2];
                                    return [4, _super.prototype.validate.call(this)];
                                case 1:
                                    validation = _a.sent();
                                    form.data[configuration.name] = validation.outcome ? _self._dateValue : null;
                                    dom_2.createErrorMessageNodes(errorMessageWrapper, validation.errorList);
                                    _a.label = 2;
                                case 2:
                                    _super.prototype._executeListeners.call(this, 'validationCompleted');
                                    _self._previousValue = _self._dateValue;
                                    return [2];
                            }
                        });
                    }); });
                };
                addDropdownListener(_this.htmlElement, _this._daySelectElement, 'day');
                addDropdownListener(_this.htmlElement, _this._monthSelectElement, 'month');
                addDropdownListener(_this.htmlElement, _this._yearSelectElement, 'year');
                _this._inputElement = dom_1.createElement('input', {
                    id: form.settings.id + "-" + configuration.name,
                    type: 'hidden',
                    class: 'hidden',
                    name: name,
                });
            }
            var abbr = dom_1.createElement('abbr', {
                class: 'ef-form-label__required',
                title: 'required',
            }, ' *');
            var labelText = dom_1.createElement('label', {
                for: form.settings.id + "-" + configuration.name,
            }, label || '');
            var labelNode = dom_1.createElement('label', {
                for: form.settings.id + "-" + configuration.name,
                class: 'ef-form-label',
            }, labelText, applyGud && _this.isRequired() ? abbr : '');
            var errorMessageWrapper = dom_1.createElement('div', {
                class: 'ef-form-validation -is-invalid ef-form-error-message',
            });
            var children = [labelNode, _this._inputElement, errorMessageWrapper];
            if (!misc_1.isMobile()) {
                (marketCode && marketCode.toLocaleLowerCase() === 'us')
                    ? children.splice(1, 0, _this._monthSelectElement, _this._daySelectElement, _this._yearSelectElement)
                    : children.splice(1, 0, _this._daySelectElement, _this._monthSelectElement, _this._yearSelectElement);
            }
            _this.htmlElement = dom_1.createElement.apply(void 0, __spreadArray(['div', {
                    class: "ef-form-control ef-form-" + configuration.name + "-wrapper\n      ef-form-" + configuration.type + "-wrapper ef-input-w u-s-mb-xs ef-form-empty " + (applyGud ? "ef-form-" + configuration.name + "-gud-wrapper" : ''),
                }], __read(children)));
            if (misc_1.isMobile()) {
                _this.htmlElement.classList.add('ef-form-empty');
            }
            return _this.htmlElement;
        };
        return _this;
    }
    DateDropdowns.builder = function (conf, form) {
        return new DateDropdowns(conf, form);
    };
    Object.defineProperty(DateDropdowns.prototype, "value", {
        get: function () {
            return this._dateValue;
        },
        set: function (value) {
            var day = -1;
            var month = -1;
            var year = -1;
            if (value) {
                day = value.day;
                month = value.month;
                year = value.year;
            }
            this._dateValue.day = day;
            this._dateValue.month = month;
            this._dateValue.year = year;
            if (misc_1.isMobile()) {
                this._inputElement.value = value ? year + "-" + zeroFill(month) + "-" + zeroFill(day) : '';
            }
            else {
                this._daySelectElement.value = value ? "" + day : '';
                this._monthSelectElement.value = value ? "" + month : '';
                this._yearSelectElement.value = value ? "" + year : '';
            }
            this.triggerChangeEvent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateDropdowns.prototype, "previousValue", {
        get: function () {
            return this._previousValue;
        },
        enumerable: false,
        configurable: true
    });
    DateDropdowns.prototype.triggerChangeEvent = function () {
        if (this._inputElement) {
            misc_2.triggerEvent(this._inputElement, 'change');
        }
        if (this._daySelectElement) {
            misc_2.triggerEvent(this._daySelectElement, 'change');
        }
    };
    return DateDropdowns;
}(Field_1.default));
exports.default = DateDropdowns;
Field_1.default.register('date', DateDropdowns.builder);
