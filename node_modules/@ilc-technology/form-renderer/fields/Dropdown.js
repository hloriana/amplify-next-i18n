"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("../utils/dom");
var Field_1 = __importDefault(require("./Field"));
var logger_1 = require("../utils/logger");
var NativeDropdown = (function (_super) {
    __extends(NativeDropdown, _super);
    function NativeDropdown(configuration, form) {
        var _this = _super.call(this) || this;
        _this.configuration = configuration;
        _this.form = form;
        _this._selectElement = null;
        _this._previousValue = '';
        _this.render = function () {
            var _a = _this, form = _a.form, configuration = _a.configuration;
            var name = configuration.name, placeholder = configuration.placeholder, label = configuration.label, options = configuration.options;
            var applyGud = form.settings.applyGud;
            if (!options) {
                logger_1.logWarning("Options is needed for field " + name + " of type " + configuration.type + " but it's missing");
                return null;
            }
            var defaultValue = (configuration.defaultValue || '').toLowerCase();
            if (options.length === 1) {
                defaultValue = options[0].code;
            }
            var abbr = dom_1.createElement('abbr', {
                class: 'ef-form-label__required',
                title: 'required',
            }, ' *');
            var labelText = dom_1.createElement('label', {
                for: form.settings.id + "-" + configuration.name,
            }, label || '');
            var labelNode = dom_1.createElement('label', {
                for: form.settings.id + "-" + configuration.name,
                class: 'ef-form-label',
            }, labelText, applyGud && _this.isRequired() ? abbr : '');
            var fragment = document.createDocumentFragment();
            options.forEach(function (_a) {
                var value = _a.code, text = _a.text;
                var option = dom_1.createElement('option', {
                    value: value,
                    selected: value.toLowerCase() === defaultValue ? 'selected' : undefined,
                }, text);
                fragment.appendChild(option);
            });
            _this._selectElement = dom_1.createElement('select', {
                id: form.settings.id + "-" + configuration.name,
                type: 'text',
                name: name,
                class: 'ef-input',
                placeholder: placeholder,
                value: defaultValue,
                autocomplete: configuration.autocompleteValue || '',
            });
            form.data[configuration.name] = defaultValue;
            _this._selectElement.appendChild(fragment);
            var errorMessageWrapper = dom_1.createElement('div', {
                class: 'ef-form-validation -is-invalid ef-form-error-message',
            });
            if (applyGud) {
                var selectWrapper = dom_1.createElement('div', {
                    class: 'ef-input-w -select',
                }, _this._selectElement);
                _this.htmlElement = dom_1.createElement('div', {
                    class: "ef-form-group ef-form-" + configuration.name + "-wrapper u-mb-m " + (defaultValue ? '' : 'ef-form-empty'),
                }, labelNode, selectWrapper, errorMessageWrapper);
            }
            else {
                _this.htmlElement = dom_1.createElement('div', {
                    class: "ef-form-control ef-form-" + configuration.name + "-wrapper\n        ef-form-" + configuration.type + "-wrapper ef-input-w -select u-s-mb-xs\n        " + (defaultValue ? '' : 'ef-form-empty'),
                }, labelNode, _this._selectElement, errorMessageWrapper);
            }
            _this._selectElement.addEventListener('change', function (_a) {
                var target = _a.target;
                return __awaiter(_this, void 0, void 0, function () {
                    var value, validation;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                value = target.value;
                                if (!this.htmlElement) {
                                    return [2];
                                }
                                _super.prototype._executeListeners.call(this, 'change');
                                return [4, _super.prototype.validate.call(this)];
                            case 1:
                                validation = _b.sent();
                                form.data[configuration.name] = validation.outcome ? value : null;
                                if (this.htmlElement) {
                                    this.htmlElement.classList.toggle('ef-form-empty', !form.data[configuration.name]);
                                }
                                dom_1.createErrorMessageNodes(errorMessageWrapper, validation.errorList);
                                _super.prototype._executeListeners.call(this, 'validationCompleted');
                                this._previousValue = value;
                                return [2];
                        }
                    });
                });
            });
            return _this.htmlElement;
        };
        return _this;
    }
    NativeDropdown.builder = function (conf, form) {
        return new NativeDropdown(conf, form);
    };
    Object.defineProperty(NativeDropdown.prototype, "value", {
        get: function () {
            return this._selectElement ? this._selectElement.value : '';
        },
        set: function (value) {
            var configuration = this.configuration;
            if (this._selectElement) {
                this._selectElement.value = value;
                this.form.data[configuration.name] = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NativeDropdown.prototype, "previousValue", {
        get: function () {
            return this._previousValue;
        },
        enumerable: false,
        configurable: true
    });
    NativeDropdown.prototype.hideOptions = function (optionCodes) {
        var _this = this;
        optionCodes.forEach(function (code) {
            if (!_this._selectElement)
                return;
            var optionElements = Array.from(_this._selectElement.options);
            var optionToRemove = optionElements.find(function (option) { return option.value === code; });
            if (optionToRemove) {
                console.log(_this._selectElement.remove(optionToRemove.index));
            }
        });
    };
    NativeDropdown.prototype.showOptions = function (optionCodes) {
        var _this = this;
        optionCodes.forEach(function (code) {
            if (!_this._selectElement)
                return;
            var configurationOption = _this.configuration.options.find(function (option) { return option.code === code; });
            if (!configurationOption)
                return;
            var optionToAdd = new Option(configurationOption.text, configurationOption.code);
            _this._selectElement.options.add(optionToAdd);
        });
    };
    return NativeDropdown;
}(Field_1.default));
exports.default = NativeDropdown;
Field_1.default.register('dropdown', NativeDropdown.builder);
