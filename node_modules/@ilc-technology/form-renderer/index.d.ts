import { IFieldConfiguration, IField, IFieldConfigurationWithOptions } from './fields/Field';
import { Listenable, IListenable } from './utils/Listenable';
export declare type ValidFieldConfiguration = IFieldConfiguration<any> | IFieldConfigurationWithOptions<any>;
export interface PluginConf {
    pluginName: string;
    pluginPath: string;
}
export interface IFormConfiguration {
    submissionButtonLabel: string;
    submissionEndpoint?: string;
    fields: ValidFieldConfiguration[];
    scriptFiles: (string | PluginConf)[];
    styleFiles: string[];
}
export interface IFormSettings {
    id: string;
    container: string;
    marketCode: string;
    applyGud?: boolean;
    labelAsPlaceholder?: string | string[];
    formConfigurationEndpoint?: string;
    formWrapperCSSClass?: string;
    plugins?: {
        [key: string]: any;
    };
}
export declare type FormEventType = 'preconfigurationDownloaded' | 'configurationDownloaded' | 'postconfigurationDownloaded' | 'preformRendered' | 'formRendered' | 'postformRendered' | 'prevalidationFailed' | 'validationFailed' | 'postvalidationFailed' | 'presubmissionObjectReady' | 'submissionObjectReady' | 'postsubmissionObjectReady' | 'presubmissionCompleted' | 'submissionCompleted' | 'postsubmissionCompleted' | 'presubmissionFailed' | 'submissionFailed' | 'postsubmissionFailed' | 'preformView' | 'formView' | 'postformView';
export declare type IListenerCallback = (form: IForm) => void;
export interface IDateObject {
    year: number;
    month: number;
    day: number;
    [key: string]: number;
}
export interface ValidationErrors {
    errorList: string[];
    fullTextErrorList: string[];
}
export interface IForm extends IListenable<FormEventType, IListenerCallback> {
    settings: IFormSettings;
    formConfiguration?: IFormConfiguration;
    htmlElement?: HTMLElement;
    fields: IField<any>[];
    validationErrors: ValidationErrors;
    submissionResponseData: any;
    data: {
        [key: string]: any;
    };
    changeMarketCode(marketCode: string): void;
    unsafeSetData(data: {
        [key: string]: any;
    }): void;
}
export declare class Form extends Listenable<FormEventType, IListenerCallback> implements IForm {
    settings: IFormSettings;
    private _formConfiguration?;
    private _htmlElement?;
    private container?;
    private _internalFields;
    private _pluginPromises;
    private _internalData;
    private _validationErrors;
    private _submissionResponseData;
    private static _globalPlugins;
    private _registeredPlugins;
    get htmlElement(): HTMLElement | undefined;
    get fields(): IField<any>[];
    get formConfiguration(): IFormConfiguration | undefined;
    get data(): {
        [key: string]: any;
    };
    unsafeSetData(data: {
        [key: string]: any;
    }): void;
    get validationErrors(): {
        errorList: string[];
        fullTextErrorList: string[];
    };
    get submissionResponseData(): any;
    constructor(settings: IFormSettings);
    loadConfiguration(): Promise<this | undefined>;
    render(): Promise<this>;
    static registerGlobalPlugin(name: string, cb: (form: Form) => void): void;
    private _executePlugins;
    changeMarketCode(marketCode: string): void;
    submit(): Promise<this>;
}
