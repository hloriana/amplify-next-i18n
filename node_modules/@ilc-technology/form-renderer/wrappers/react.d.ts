import { Component } from 'react';
import { IForm, IFormSettings } from '..';
export declare type IContainerlessFormSettings = Omit<IFormSettings, 'container'>;
export interface FormWrapperSettings extends IContainerlessFormSettings {
    onSubmit?: (form: IForm) => void;
    onPreConfigurationDownloaded?: (form: IForm) => void;
    onConfigurationDownloaded?: (form: IForm) => void;
    onPostConfigurationDownloaded?: (form: IForm) => void;
    onPreFormRendered?: (form: IForm) => void;
    onFormRendered?: (form: IForm) => void;
    onPostFormRendered?: (form: IForm) => void;
    onPreFormView?: (form: IForm) => void;
    onFormView?: (form: IForm) => void;
    onPostFormView?: (form: IForm) => void;
    onPreValidationFailed?: (form: IForm) => void;
    onValidationFailed?: (form: IForm) => void;
    onPostValidationFailed?: (form: IForm) => void;
    onPreSubmissionObjectReady?: (form: IForm) => void;
    onSubmissionObjectReady?: (form: IForm) => void;
    onPostSubmissionObjectReady?: (form: IForm) => void;
    onPreSubmissionCompleted?: (form: IForm) => void;
    onSubmissionCompleted?: (form: IForm) => void;
    onPostSubmissionCompleted?: (form: IForm) => void;
    onPreSubmissionFailed?: (form: IForm) => void;
    onSubmissionFailed?: (form: IForm) => void;
    onPostSubmissionFailed?: (form: IForm) => void;
    className?: string;
    formWrapperId?: string;
    applyGud?: boolean;
    labelAsPlaceholder?: string | string[];
}
export interface FormWrapperState {
    loading: boolean;
    wrapperId: string;
}
declare class formWrapper extends Component<FormWrapperSettings, FormWrapperState> {
    constructor(props: FormWrapperSettings);
    componentDidMount(): void;
    render(): JSX.Element;
}
export default formWrapper;
