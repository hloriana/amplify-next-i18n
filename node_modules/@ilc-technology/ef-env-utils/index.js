"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.markets = exports.getTextDirection = exports.getLanguageCode = exports.mapVirtualMarketCodesToReal = exports.getNormalizedEFComProgramCode = exports.getCountryCodeByMarketCode = exports.getLanguageCodeFromPathname = exports.getMarketInfoByMarketCode = exports.isEFDomain = exports.getMarketInfoByUrl = exports.isLive = exports.isQA = exports.isDev = exports.isLocal = void 0;
var markets_1 = __importDefault(require("./markets"));
exports.markets = markets_1.default;
var envRegex = {
    local: /^(localhost|127\.0\.0\.1|0\.0\.0\.0|dev\.)/,
    dev: /^(qa.ef.de\/dev-rhps)/,
    qa: /^qa[\-a-z]*\./,
    valid: /^([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]\.)*[A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]\.[A-Za-z0-9]{2,}/,
    languageCode: /^\/(ca|cafr|ir|wwes|wwen|wwru|wwfr|wwar|nl|de|fr|cl|it)\//,
};
var specialCountryCodes = {
    bx: 'be',
    cs: 'ch',
    ct: 'ch',
    fc: 'ca',
};
exports.isLocal = function (hostname) {
    if (hostname === void 0) { hostname = document.location.hostname; }
    return envRegex.local.test(hostname);
};
exports.isDev = function (hostname) {
    if (hostname === void 0) { hostname = document.location.hostname; }
    return envRegex.dev.test(hostname);
};
exports.isQA = function (hostname) {
    if (hostname === void 0) { hostname = document.location.hostname; }
    return envRegex.qa.test(hostname);
};
exports.isLive = function (hostname) {
    if (hostname === void 0) { hostname = document.location.hostname; }
    return envRegex.valid.test(hostname) && !exports.isLocal(hostname) && !exports.isQA(hostname);
};
var buildMarketInfoObject = function (mc) {
    var mkt = markets_1.default.find(function (market) { return market.marketCode === mc; });
    if (!mkt) {
        throw new Error("[ENV] Invalid marketCode requested: " + mc);
    }
    return __assign(__assign({}, mkt), { qaDomain: mkt.marketCode === 'cn' ? "qa-liuxue.ef.com.cn" : "qa." + mkt.domain, liveDomain: (mkt.marketCode === 'cn' ? 'liuxue' : 'www') + "." + mkt.domain });
};
exports.getMarketInfoByUrl = function (url) {
    if (url === void 0) { url = document.location.href; }
    for (var _i = 0, markets_2 = markets_1.default; _i < markets_2.length; _i++) {
        var mkt = markets_2[_i];
        if (new RegExp(mkt.domain).test(url)) {
            return buildMarketInfoObject(mkt.marketCode);
        }
    }
    return null;
};
exports.isEFDomain = function (href) {
    if (href === void 0) { href = document.location.href; }
    return exports.getMarketInfoByUrl(href) !== null;
};
exports.getMarketInfoByMarketCode = function (mc) {
    if (mc === void 0) { mc = 'xx'; }
    return buildMarketInfoObject(mc.toLowerCase());
};
exports.getLanguageCodeFromPathname = function (pathname) {
    if (pathname === void 0) { pathname = document.location.pathname; }
    var languageCodeArr = envRegex.languageCode.exec(pathname);
    return languageCodeArr ? "/" + languageCodeArr[1] : '';
};
exports.getCountryCodeByMarketCode = function (mc) { return specialCountryCodes[mc.toLowerCase()] || mc; };
exports.getNormalizedEFComProgramCode = function (prog) {
    switch (prog) {
        case 'ly':
        case 'aya':
            return 'aya';
        case 'ilsu':
        case 'ils':
            return 'ils';
        case 'ilc':
        case 'ilsh':
            return 'ilsh';
        case 'ilsp':
        case 'lsp':
            return 'lsp';
        case 'bc':
        case 'upa':
            return 'upa';
        case 'lt':
            return 'lt';
        default:
            return null;
    }
};
exports.mapVirtualMarketCodesToReal = function (mc) {
    switch (mc) {
        case 'dx':
            return 'dz';
        case 'tx':
            return 'tn';
        case 'sx':
            return 'sa';
        case 'ax':
            return 'az';
        default:
            return mc;
    }
};
exports.getLanguageCode = function (lang) {
    switch (lang) {
        case 'dk':
            return 'da';
        case 'ro':
            return 'wwru';
        case 'si':
            return 'wwru';
        case 'lv':
            return 'wwru';
        case 'hk':
            return 'zh-HK';
        case 'tw':
            return 'zh-TW';
        case 'cn':
            return 'zh-Hans';
        case 'kz':
            return 'wwru';
        default:
            return lang;
    }
};
var rtlMarkets = ['sa', 'ly', 'ir', 'wwar', 'dx'];
exports.getTextDirection = function (marketCode) {
    var defaultDirection = 'ltr';
    if (marketCode) {
        var direction = rtlMarkets.indexOf(marketCode.toLowerCase()) >= 0 ? 'rtl' : 'ltr';
        return direction;
    }
    else {
        return defaultDirection;
    }
};
