const{componentDirectory:componentDirectory}=require("./config"),Logger=require("./helpers/logger"),{components:components,findComponentsWithExt:findComponentsWithExt}=require("./discover"),api=require("./api"),_uniqueValuesFrom=n=>[...new Set(n)],_checkAndPrepareGroups=async n=>{const o=await api.getAllComponentsGroups(),e=n=>o.component_groups.find(o=>o.name===n);for(groupName of n)e(groupName)||await api.createComponentsGroup(groupName)},_resolveGroups=async(n,o,e)=>{if(!n.component_group_name)return{...n,component_group_uuid:null};const t=o.find(o=>n.component_group_name===o);if(t){const o=e.component_groups.find(n=>n.name===t).uuid;return{...n,component_group_uuid:o}}},syncComponents=async(n,o,e)=>{let t;Logger.log(`Trying to sync specified components from '${componentDirectory}'`),t=o?findComponentsWithExt(o):components;const p=_uniqueValuesFrom(t.filter(n=>n.component_group_name).map(n=>n.component_group_name));await _checkAndPrepareGroups(p);const r=await api.getAllComponents();let m=[],s=[];for(const n of t){const o=r.components.find(o=>n.name===o.name);o?m.push({id:o.id,...n}):s.push(n)}const a=await api.getAllComponentsGroups();Promise.all(m.filter(o=>{const e=n.find(n=>n===o.name);return e&&(n=n.filter(n=>n!==e)),e}).map(n=>_resolveGroups(n,p,a))).then(n=>{Logger.log("Components to update after check: "),n.map(n=>{Logger.warning(`   ${n.name}`),api.updateComponent(n,e)})}),Promise.all(s.filter(o=>{return n.find(n=>n===o.name)}).map(n=>_resolveGroups(n,p,a))).then(n=>{Logger.log("Components to create after check: "),n.map(n=>{Logger.warning(`   ${n.name}`),api.createComponent(n,e)})})},syncAllComponents=(n,o)=>{let e;e=n?findComponentsWithExt(n).map(n=>n.name):components.map(n=>n.name),syncComponents(e,n,o)};module.exports={syncAllComponents:syncAllComponents,syncComponents:syncComponents};