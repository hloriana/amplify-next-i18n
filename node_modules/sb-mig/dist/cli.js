const updateNotifier=require("update-notifier"),execa=require("execa"),fs=require("fs"),Logger=require("./helpers/logger"),commander=require("commander"),package=require("../package.json"),api=require("./api"),os=require("os"),migrate=require("./migrate"),{sbApi:sbApi}=require("./api/config"),{generateComponentsFile:generateComponentsFile}=require("./helpers/componentsFileGenerator"),{components:components}=require("./discover"),ora=require("ora"),rimraf=require("rimraf"),{boilerplateUrl:boilerplateUrl,sbmigWorkingDirectory:sbmigWorkingDirectory,schemaFileExt:schemaFileExt,componentsDirectories:componentsDirectories,componentDirectory:componentDirectory,reactComponentsDirectory:reactComponentsDirectory,npmScopeForComponents:npmScopeForComponents}=require("./config"),configValues=require("./config"),{createDir:createDir,createJsonFile:createJsonFile,copyFile:copyFile,copyFolder:copyFolder}=require("./helpers/files"),program=new commander.Command;async function start(){Logger.bigLog("sb-mig");try{if(updateNotifier({pkg:package,updateCheckInterval:1e3,shouldNotifyInNpmScript:!0}).notify(),program.version(package.version),program.option("-s, --sync","Sync provided components from schema").option("-S, --sync-all","Sync all components from schema").option("-D, --sync-datasources","Sync provided datasources from schema").option("-n, --no-presets","Use with --sync or --sync-all. Sync components without presets").option("-x, --ext","Use only with --sync or --sync-all. By default sync with *.sb.js extension").option("-g, --all-components-groups","Get all component groups").option("-C, --components-group <components-group-name>","Get single components group by name").option("-a, --all-components","Get all components").option("-c, --component <component-name>","Get single component by name").option("-q, --all-presets","Get all presets").option("-p, --preset <preset-id>","Get preset by id").option("-d, --component-presets <component-name>","Get all presets for single component by name").option("-e, --datasource <datasource-name>","Get single datasource by name").option("-f, --datasource-entry <datasource-name>","Get single datasource entries by name").option("-t, --all-datasources","Get all datasources").option("-G, --generate","Generate project").option("-A, --add","Add components.").option("-d, --debug","Output extra debugging"),program.parse(process.argv),program.syncDatasources&&(Logger.log(`Syncing priovided datasources ${program.args}...`),api.syncDatasources(program.args)),program.syncDatasources&&(Logger.log(`Syncing priovided datasources ${program.args}...`),api.syncDatasources(program.args)),program.add&&!program.generate){console.log(program.args);let e=ora("Installing components...").start();Promise.allSettled(program.args.map(e=>execa.command(`npm install ${npmScopeForComponents}/${e} --save`))).then(o=>{o.map(o=>{e.stop(),"fulfilled"===o.status&&Logger.success(`${o.value.command} end successful!`),"rejected"===o.status&&(Logger.error(`${o.value.command} rejected :( !`),console.log(o.value.stdout))}),e=ora("Copying folders...").start(),Promise.allSettled(program.args.map(e=>{const o=e.split("@")[0];return copyFolder(`./node_modules/${npmScopeForComponents}/${o}/src/`,`./${reactComponentsDirectory}/scoped/`)})).then(o=>{o.map(o=>{e.stop(),"fulfilled"===o.status&&Logger.success(o.value.message),"rejected"===o.status&&(Logger.error(o.value.message),console.log(o))})}).catch(e=>{Logger.error("error happened when copying folders... :("),console.log(e)})}).catch(e=>{Logger.error("error happened when installing scoped components... :("),console.log(e)})}program.generate&&(Logger.warning("Starting generating project..."),(async()=>{if(program.args.length>0){if(Logger.log("Creating start project..."),Logger.log(`Using ${boilerplateUrl} boilerplate...`),(await execa.command(`git clone ${boilerplateUrl} storyblok-boilerplate`,{shell:!0})).failed)return!1;const{data:{space:e}}=await api.createSpace(program.args[0]);if(Logger.success(`Space ${program.args[0]} has been created.`),rimraf.sync("./storyblok-boilerplate/.git"),rimraf.sync("./storyblok-boilerplate/storyblok.config.js"),rimraf.sync("./storyblok-boilerplate/.npmrc"),rimraf.sync("./storyblok-boilerplate/src/components/components.js"),fs.appendFile("./.env",`\nSTORYBLOK_SPACE_ID=${e.id}\nGATSBY_STORYBLOK_ACCESS_TOKEN=${e.first_token}`,e=>{if(e)return Logger.error(e);Logger.success(".env file has been updated")}),"Windows_NT"===os.type()?execa.commandSync("move ./storyblok-boilerplate/* ./",{shell:!0}):(execa.commandSync("mv ./storyblok-boilerplate/* ./",{shell:!0}),execa.commandSync("mv ./storyblok-boilerplate/.[!.]* ./",{shell:!0})),rimraf.sync("storyblok-boilerplate"),program.add){program.args.slice(1,program.args.length).map(async e=>{execa.commandSync(`npm install ${npmScopeForComponents}/${e} --save`)})}if(Logger.log("Installing dependencies..."),await execa.command("npm install"),Logger.success("Dependenciess installed."),Logger.log("Starting copying components and schemas from node_modules..."),program.add){const e=program.args.slice(1,program.args.length);e.map(async e=>{await copyFile(`./node_modules/${npmScopeForComponents}/${e}/${e}.sb.js`,`./${reactComponentsDirectory}/scoped/${e}.sb.js`),await copyFile(`./node_modules/${npmScopeForComponents}/${e}/src/${e}.js`,`./${reactComponentsDirectory}/scoped/${e}.js`)}),await createJsonFile(generateComponentsFile(e),"./src/components/components.js")}const{data:{stories:o}}=await sbApi.get(`spaces/${e.id}/stories/`);await sbApi.get(`spaces/${e.id}/stories/${o[0].id}/publish`),Logger.log(`Run sb-mig --sync-all --ext to synchronize all storyblok components. Then: npm start. Go to http://app.storyblok.com/#!/me/spaces/${e.id}/ and enjoy.`)}else Logger.warning("Provide name of the space to be created")})()),!program.ext||program.sync||program.syncAll||Logger.warning(`Use only with --sync or --sync-all option: sb-mig --sync --ext ${program.args.join(" ")}`),program.sync&&!program.ext&&(Logger.log("Syncing provided components..."),0===program.args.length?Logger.warning("You have to provide some components separated with empty space. For exmaple: 'row column card'"):migrate.syncComponents(program.args,program.ext,program.presets)),program.sync&&program.ext&&(Logger.log(`Syncing provided components with ${schemaFileExt} extension, inside [${componentsDirectories.join(", ")}] directories ...`),0===program.args.length?Logger.warning("You have to provide some components separated with empty space. For exmaple: 'row column card'"):migrate.syncComponents(program.args,schemaFileExt,program.presets)),program.syncAll&&!program.ext&&(Logger.log(`Syncing all components from ${componentDirectory} directory...`),migrate.syncAllComponents(!1,program.presets)),program.syncAll&&program.ext&&(Logger.log(`Syncing all components with ${schemaFileExt} extension...`),migrate.syncAllComponents(schemaFileExt,program.presets)),program.preset&&api.getPreset(program.preset).then(async e=>{if(e){const o=(new Date).toJSON(),r=`preset-${program.preset}-${o}`;await createDir(`${sbmigWorkingDirectory}/presets/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/presets/${r}.json`),Logger.success(`Preset for '${program.preset}' have been written to a file:  ${r}`)}}),program.allPresets&&api.getAllPresets().then(async e=>{const o=`all-presets-${(new Date).toJSON()}`;await createDir(`${sbmigWorkingDirectory}/presets/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/presets/${o}.json`),Logger.success(`All presets written to a file:  ${o}`)}),program.datasourceEntry&&api.getDatasourceEntries(program.datasourceEntry).then(async e=>{if(e){const o=(new Date).toJSON(),r=`datasource-entries-${program.datasourceEntry}-${o}`;await createDir(`${sbmigWorkingDirectory}/datasources/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/datasources/${r}.json`),Logger.success(`Datasource entries for ${program.datasourceEntry} written to a file:  ${r}`)}}),program.datasource&&api.getDatasource(program.datasource).then(async e=>{if(e){const o=(new Date).toJSON(),r=`datasource-${program.datasource}-${o}`;await createDir(`${sbmigWorkingDirectory}/datasources/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/datasources/${r}.json`),Logger.success(`Datasource for ${program.datasource} written to a file:  ${r}`)}}),program.allDatasources&&api.getAllDatasources().then(async e=>{const o=`all-datasources-${(new Date).toJSON()}`;await createDir(`${sbmigWorkingDirectory}/datasources/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/datasources/${o}.json`),Logger.success(`All datasources written to a file:  ${o}`)}),program.componentPresets&&api.getComponentPresets(program.componentPresets).then(async e=>{if(e){const o=(new Date).toJSON(),r=`component-${program.componentPresets}-all_presets-${o}`;await createDir(`${sbmigWorkingDirectory}/component-presets/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/component-presets/${r}.json`),Logger.success(`Presets for ${program.componentPresets} written to a file:  ${r}`)}}),program.allComponentsGroups&&api.getAllComponentsGroups().then(async e=>{const o=`all-component_groups-${(new Date).toJSON()}`;await createDir(`${sbmigWorkingDirectory}/component_groups/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/component_groups/${o}.json`),Logger.success(`All groups written to a file:  ${o}`)}),program.componentsGroup&&api.getComponentsGroup(program.componentsGroup).then(async e=>{if(e){const o=(new Date).toJSON(),r=`components_group-${program.componentsGroup}-${o}`;await createDir(`${sbmigWorkingDirectory}/component_groups/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/component_groups/${r}.json`),Logger.success(`Components group for ${program.componentsGroup} written to a file:  ${r}`)}}),program.component&&api.getComponent(program.component).then(async e=>{if(e){const o=(new Date).toJSON(),r=`component-${program.component}-${o}`;await createDir(`${sbmigWorkingDirectory}/components/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/components/${r}.json`),Logger.success(`Component for ${program.component} written to a file:  ${r}`)}}),program.allComponents&&api.getAllComponents().then(async e=>{const o=`all-components-${(new Date).toJSON()}`;await createDir(`${sbmigWorkingDirectory}/components/`),await createJsonFile(JSON.stringify(e),`${sbmigWorkingDirectory}/components/${o}.json`),Logger.success(`All components written to a file:  ${o}`)}),program.debug&&(Logger.log("Values used by sb-mig: "),Logger.log(configValues))}catch(e){Logger.error(e),process.exit(1)}}module.exports={start:start};