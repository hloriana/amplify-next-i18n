const Logger=require("../helpers/logger"),{spaceId:spaceId}=require("../config"),{sbApi:sbApi}=require("./config"),{findDatasources:findDatasources}=require("../discover"),getAllDatasources=()=>(Logger.log("Trying to get all Datasources."),sbApi.get(`spaces/${spaceId}/datasources/`).then(({data:e})=>e).catch(e=>{if(404!==e.response.status)return Logger.error(e),!1;Logger.error(`There is no datasources in your Storyblok ${spaceId} space.`)})),getDatasource=e=>(Logger.log(`Trying to get '${e}' datasource.`),getAllDatasources().then(a=>{if(a)return a.datasources.filter(a=>a.name===e)}).then(a=>Array.isArray(a)&&0===a.length?(Logger.warning(`There is no datasource named '${e}'`),!1):a).catch(e=>Logger.error(e))),getDatasourceEntries=async e=>{Logger.log(`Trying to get '${e}' datasource entries.`);const a=await getDatasource(e);if(a)return sbApi.get(`spaces/${spaceId}/datasource_entries/?datasource_id=${a[0].id}`).then(async({data:e})=>e).catch(e=>Logger.error(e))},createDatasource=e=>sbApi.post(`spaces/${spaceId}/datasources/`,{datasource:{name:e.name,slug:e.slug}}).then(({data:a})=>({data:a,datasource_entries:e.datasource_entries})).catch(e=>Logger.error(e)),createDatasourceEntry=(e,a)=>sbApi.post(`spaces/${spaceId}/datasource_entries/`,{datasource_entry:{name:Object.values(e)[0],value:Object.values(e)[1],datasource_id:a}}).then(({data:e})=>e).catch(e=>Logger.error(e)),updateDatasourceEntry=(e,a,r)=>sbApi.put(`spaces/${spaceId}/datasource_entries/${r.id}`,{datasource_entry:{name:Object.values(e)[0],value:Object.values(e)[1],datasource_id:a,id:r.id}}).then(({data:e})=>e).catch(e=>Logger.error(e)),updateDatasource=(e,a)=>sbApi.put(`spaces/${spaceId}/datasources/${a.id}`,{datasource:{id:a.id,name:e.name,slug:e.slug}}).then(({data:a})=>({data:a,datasource_entries:e.datasource_entries})).catch(e=>Logger.error(e)),createDatasourceEntries=(e,a,r)=>{Promise.all(a.map(a=>{const s=r.datasource_entries.find(e=>e.name===Object.values(a)[0]);return s?updateDatasourceEntry(a,e,s):createDatasourceEntry(a,e)})).then(({data:a})=>(Logger.success(`Datasource entries for ${e} datasource id has been successfully synced.`),a)).catch(e=>Logger.error(e))},syncDatasources=async e=>{Logger.log(`Trying to sync provided datasources: ${e}`),localDatasources=findDatasources(".datasource.js"),remoteDatasources=await getAllDatasources();const a=localDatasources.filter(a=>e.some(e=>a.name===e));Promise.all(a.map(e=>{const a=remoteDatasources.datasources.find(a=>e.name===a.name);return a?updateDatasource(e,a):createDatasource(e)})).then(e=>(e.map(async({data:e,datasource_entries:a})=>{const r=await getDatasourceEntries(e.datasource.name);createDatasourceEntries(e.datasource.id,a,r)}),e)).catch(e=>(cosnole.log(e),Logger.warning("There is error inside promise.all from datasource"),!1))};module.exports={getAllDatasources:getAllDatasources,getDatasource:getDatasource,getDatasourceEntries:getDatasourceEntries,syncDatasources:syncDatasources};