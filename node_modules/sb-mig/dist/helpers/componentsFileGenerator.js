const camelCase=require("camelcase"),generateComponentsFile=n=>`\nimport React from "react";\nimport ComponentNotFound from "./component_not_found";\nimport Page from "./page";\nimport Blank from "./blank";\nimport Section from "./Section/section";\nimport Row from "./Row/row";\nimport Column from "./Column/column";\nimport Card from "./Card/card";\nimport VideoCard from "./VideoCard/video-card";\nimport Fullbleed from "./Fullbleed/fullbleed";\nimport TextBlock from "./TextBlock/text-block";\nimport Accordion from "./Accordion/accordion";\nimport List from "./List/list";\nimport Surface from "./Surface/surface";\nimport Tag from "./Tag/tag";\n${n.reduce((n,o)=>`${n}\n    import ${camelCase(o,{pascalCase:!0})} from "./scoped/${o}"`,"")}\n\nconst withComponents = (WrappedComponent, Components) => {\n  return props => {\n      return <WrappedComponent {...props} Components={Components} />\n  }\n}\n\nconst ComponentList = {\n  page: Page,\n  blank: Blank,\n  section: Section,\n  row: Row,\n  column: Column,\n  card: Card,\n  surface: Surface,\n  accordion: Accordion,\n  tag: Tag,\n  "video-card": VideoCard,\n  list: List,\n  fullbleed: Fullbleed,\n  "text-block": TextBlock,\n  ${n.reduce((n,o)=>`${n}"${o}": ${camelCase(o,{pascalCase:!0})},\n      `,"")}\n};\n\nconst Components = type => {\n  if (typeof ComponentList[type] === "undefined") {\n    return ComponentNotFound;\n  }\n  return ComponentList[type];\n};\n\nexport default Components;\n  `,componentsFile=generateComponentsFile(["text-block","test-image"]);module.exports={componentsFile:componentsFile,generateComponentsFile:generateComponentsFile};